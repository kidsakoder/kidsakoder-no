buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url "http://repo.enonic.com/public"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "com.enonic.xp:gradle-plugin:${xpVersion}"
    }
}

apply plugin: 'com.enonic.xp.app'

app {
    name = project.appName
    displayName = project.displayName
    vendorName = project.vendorName
    vendorUrl = project.vendorUrl
    xpHome = new File("${xpHomeDir}".replaceFirst("^~", ant.properties["user.home"])) // Comment this line on the CI server
}

sourceSets {
    main {
        resources {
            srcDir 'site'
            exclude 'frontend'
        }
    }
}

// ##
// ## Application tasks
// ##
task deployFull {
    mustRunAfter('npmBuild')
    dependsOn('npmBuild')
    dependsOn(':deploy')
    group 'application'
    description 'Builds and deploys entire application, including frontend npm build'
}

// ##
// ## Enonic XP Server tasks
// ##
task startserver(group: 'enonic xp', description: 'Starts Enonic XP Server configured in gradle.properties') << {
    println("Starting Enonic XP server version ${xpVersion} with home directory ${app.xpHome}")
    Runtime.getRuntime().exec(["/bin/sh " + new File(ant.properties['user.home'].toString(), "/dev/software/enonic/start.sh") + " ${xpVersion} ${app.xpHome}"])
}

task stopserver(group: 'enonic xp',  description: 'Stops Enonic XP Server configured in gradle.properties') << {
    println("Stopping Enonic XP server ${xpVersion} with home directory ${app.xpHome}")
    Runtime.getRuntime().exec("/bin/sh " + ant.properties['user.home'] + "/dev/software/enonic/stop.sh" + " ${xpVersion} ${app.xpHome}")
}

// ##
// ## Frontend/npm tasks
// ##
task npmInstallDeps(type: NpmTask) {
    args = ['install']
    workingDir = './src/main/resources/frontend/'
    group 'node'
    description 'Install npm dependencies (package.json)'
}

task npmCleanDeps(group: 'node', description: 'Delete npm dependencies (**/node_modules/') << {
    def nodeModulesDir = new File("./src/main/resources/frontend/node_modules")
    nodeModulesDir.deleteDir()
}

task npmCleanProject(type: NpmTask) {
    args = ['run', 'clean']
    workingDir = './src/main/resources/frontend/'
    group 'node'
    description 'Clean npm frontend project (package.json)'
}

task npmBuild(type: NpmTask) {
    args = ['run', 'build']
    workingDir = './src/main/resources/frontend/'
    group 'node'
    description 'Build npm frontend project (package.json)'
    dependsOn npmInstallDeps
}

clean.dependsOn(npmCleanProject)

dependencies {
    compile "com.enonic.xp:core-api:${xpVersion}"
    compile "com.enonic.xp:portal-api:${xpVersion}"
    include "com.enonic.xp:lib-content:${xpVersion}"
    include "com.enonic.xp:lib-context:${xpVersion}"
    include "com.enonic.xp:lib-portal:${xpVersion}"
    include "com.enonic.xp:lib-thymeleaf:${xpVersion}"
    include "com.enonic.xp:lib-i18n:${xpVersion}"
    include 'com.enonic.lib:util:1.1.2'
    include "com.enonic.xp:lib-http-client:${xpVersion}"
    include "com.enonic.xp:lib-mail:${xpVersion}"
    include "com.enonic.xp:lib-i18n:${xpVersion}"
    include "com.enonic.xp:lib-auth:${xpVersion}"
}

repositories {
    mavenLocal()
    jcenter()
    maven {
        url 'http://repo.enonic.com/public'
    }
}

node {
    // Version of node to use.
    version = '4.2.3'

    // Version of npm to use.
    npmVersion = '2.14.7'

    // Base URL for fetching node distributions (change if you have a mirror).
    //distBaseUrl = 'https://nodejs.org/dist'

    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true

    // Set the work directory for unpacking node
    //workDir = file("${project.buildDir}/nodejs")
    //workDir = file("${project.projectDir}/src/resources/frontend/node_modules/nodejs/")

    // Set the work directory where node_modules should be located
    //nodeModulesDir = file("${project.projectDir}/src/resources/frontend/")
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}
